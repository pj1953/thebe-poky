10Nov14 by O'Neil

This directory holds things that are particular to Hughes's Thebe
terminal environment.

You need two git repositories to build the Thebe RFS. They are:

    - poky (originally from git clone git://git.yoctoproject.org/poky)
    - meta-openembeded (originally from git clone
      git://git.openembedded.org/meta-openembedded)

We don't plan to make any changes to meta-openembedded, so to recover
from a disaster, you would just re-fetch it.

We have made changes to poky, and plan to post them back at github. We
will update this file with the particulars.

Both of these repositories must be children of the same parent
directory because there are relative references (../) from the poky
repository to the meta-openembedded repository.

To build, the RFS, say:

    cd poky
    . ./oe-init-build-env
    bitbake core-image-minimal-dev

This will create a Root FileSystem (RFS) in several formats. The
easiest format to deal with is this tarball:

    poky/build/tmp/deploy/images/qemuarm/core-image-minimal-qemuarm.tar.bz2

Just expand this tarball over the top of the RFS that is generated by
the toolchain installer (adt-installer). After that, make sure to add
'go+rx' protection to all directories in the RFS and 'go+r' to all
files. Then apply thebe_oe.patch.

thebe_oe.patch - apply this to sysroot. It fixes up some problems with the OE bake:

    - wrong value for meta/recipes-core/busybox/ in netinet/in.h - the
      patch makes it conform to the value used in the Linux kernel

    - missing curl/types.h - In some earlier versions, this file was
      elminated and replaced with a nonce for compatibility. The
      latest OE bake takes out the nonce. The patch puts it back.

I had some trouble getting busybox to compile with all the options. It
seemed to be getting confused by the presence of .config.old. If
include/autoconf.h does not agree with .config, delete .config.old and
force a re-compile of busybox:

    bitbake -f -c compile busybox

Then re-build everything:

    bitbake core-image-minimal-dev

The Hughes customization occurs mainly in:

    poky/build/conf/bblayers.conf - which adds some layers from the
                                    other repository
    poky/build/conf/local.conf - which adds some packages we need but
                                 are not part of
                                 core-image-minimal-dev. It also adds
                                 the name of a mirror that was not
                                 included in received metadata.

A note on packages. At some future time, you may find that the RFS is
missing things that you need. You'll realize this when the compiler
reports that some header file cannot be found, or the linker reports
that some shared library cannot be found.

You have to figure out which "package" the missing object is from. You
can probably work this out by googling: "what package contains
foo". You will probably get a package name that pertains to Redhat
Package Manager (RPM) or Synaptic package manager (ADT), but most
package management schemes use the same nomenclature.

If you can't work out the package name by googling, it may have been
built already as a side effect of some other package that's already in
the build. Suppose you're missing the file libpam.so. Try this:

    find poky/build/tmp -name libpam.so | grep /package/

If you get this:

    poky/build/tmp/work/armv5te-poky-linux-gnueabi/libpam/1.1.6-r5/package/lib/libpam.so

you would know that the package is libpam (two nodes back from /package/).

Once you know the package, add it to local.conf and rebuild. If you
don't get any errors, you are done. If you get:

    Nothing provides foo

Read on.

A recipe is a file of type '.bb'. Starting from the directory that
holds the git repositories, you can find all the recipes like this:

    find */meta* -name \*.bb

Here's a typical recipe:

    meta/recipes-core/busybox/busybox_1.22.1.bb

You can bake the recipe by saying

    bitbake busybox

The part of the recipe name after the underscore is the version. If
you don't specify a version, the latest version will be baked. If
there were also an older version of busybox available, you could bake
it by saying:

    bitbake busybox_1.21.1

Many recipes provide a single package with the same name as
the recipe, but some recipes provide more than one package, and it can
be a little bit difficult to figure out what the packages are. The
definitive way to find a recipe's packages is to bake the recipe:

    bitbake busybox net-tools

Find that recipe's package-split directory:

    find poky/build/tmp -name packages-split | grep net-tools

returns:

    poky/build/tmp/work/armv5te-poky-linux-gnueabi/net-tools/1.60-25-r0/packages-split

For each package in the recipe, there is a directory:

    net-tools
    net-tools-dbg
    net-tools-dev
    net-tools-doc
    net-tools-locale-cs
    net-tools-locale-de
    net-tools-locale-et-ee
    net-tools-locale-fr
    net-tools-locale-ja
    net-tools-locale-pt-br
    net-tools-staticdev

Layers. Bitbake looks for recipes and packages in all the layers that
you have configured. A layer is a subdirectory of the repository that
begins with the string "meta". The layers in poky are:

    *meta
     meta-initramfs
     meta-selftest
     meta-skeleton
    *meta-yocto
    *meta-yocto-bsp

The layers in meta-openembedded are:
     meta-efl
     meta-filesystems
     meta-gnome
     meta-gpe
     meta-initramfs
     meta-multimedia
    *meta-networking
     meta-oe
     meta-perl
    *meta-python
     meta-ruby
     meta-systemd
    *meta-webserver
     meta-xfce

Only the layers with * are configured in bblayers.conf, so only
recipes in those layers can be built. If you can't find a package,
grep around in the unselected layers for something that looks like
what you want. Add it to bblayers.conf and give it a shot.

If you work through all the above layers and don't find what you want,
try some other repositories at yoctoproject.org and openembedded.org.

Bitbake requires later versions of git and python than are provided by
Hughes IT VMs, so I had to do all my baking on my desktop Linux
machine. (I probably could have used a VirtualBox VM on my desktop PC,
but what I did was good enough). All the ELF output from the desktop
linux (along with the toolchain installed by adt-installer) runs fine
when copied to one of the IT VMs as long as the VM is at RedHat 6.1 or
better. The toolchain doesn't run correctly on RedHat
5,6. Unfortunately, that is the most common breed in our
stable. Fortunately, the toolchain and the RFS are in the same
sub-tree.

